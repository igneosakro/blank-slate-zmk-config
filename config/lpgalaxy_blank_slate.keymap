/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

// #define TBLE_ORTHO   1
// #define TBLE_MIT     1
#define TBLE_DUAL_2U    1

#define LETTERS 0
#define NUMBERS 1
#define FUNCTION 2
#define SPECIAL 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,physical-layout =
#ifdef TBLE_DUAL_2U
                       &layout_ortho_4x12_2x2u;
#elif defined(TBLE_MIT)
                       &layout_ortho_4x12_1x2u;
#else
                       &layout_ortho_4x12_all1u;
#endif
    };

    macros {
      ZMK_MACRO(thumbs_up,
		wait-ms = <1>;
		tap-ms = <5>;
                bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
		)
    };

    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	    };

    	tabby: tab_caps {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_TABBY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp TAB>, <&kp CAPS>;
	    };
    };

        combos {
                compatible = "zmk,combos";
                combo_bt_clr {
                    timeout-ms = <200>;
                    key-positions = <18 23>;
                    bindings = <&bt BT_CLR>;
                    layers = <FUNCTION>;
                };
        };

// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUMBERS FUNCTION>;
	    then-layer = <SPECIAL>;
        };
    };
#endif

    keymap {
        compatible = "zmk,keymap";

        letters {
            label = "Letters";
            bindings = <
#ifdef QWERTY_BASE
   &kp ESC             &kp Q               &kp W               &kp E               &kp R               &kp T                                   &kp Y               &kp U               &kp I               &kp O               &kp P               &kp BSPC
   &tabby              &kp A               &kp S               &kp D               &kp F               &kp G                                   &kp H               &kp J               &kp K               &kp L               &kp SEMI            &kp SQT
   &shifty             &kp Z               &kp X               &kp C               &kp V               &kp B                                   &kp N               &kp M               &kp COMMA           &kp DOT             &kp FSLH            &kp RSHFT
#else
 &kp ESC    &kp Q      &kp W      &kp F       &kp P          &kp B          &kp J            &kp L          &kp U       &kp Y      &kp QUOT    &kp BKSP
 &kp TAB    &kp A      &kp R      &kp S       &kp T          &kp G          &kp M            &kp N          &kp E       &kp I      &kp O       &kp QUOT
 &kp LSHFT  &kp Z      &kp X      &kp C       &kp D          &kp V          &kp K            &kp H          &kp COMMA   &kp DOT    &kp SEMI    &kp NUHS
#endif
#ifdef TBLE_DUAL_2U
   &kp LCTRL           &kp LGUI            &kp LALT            &mo NUMBERS         &kp SPACE                                                                       &kp RET             &mo FUNCTION        &kp RALT            &kp DEL            &kp RCTRL
#elif defined(TBLE_MIT)
 &kp LCTRL  &mo SYM_L   &kp LGUI  &kp LALT    &mo NAV_L          &kp SPACE                   &mo NUM_L      &kp LEFT    &kp UP     &kp DOWN    &kp RIGHT
#else
 &kp LCTRL  &mo SYM_L   &kp LGUI  &kp LALT    &mo NAV_L      &kp SPACE      &kp RET          &mo NUM_L      &kp LEFT    &kp UP     &kp DOWN    &kp RIGHT
#endif
            >;
        };

        numbers {
            label = "Numbers";
            bindings = <
   &kp GRAVE           &kp N1              &kp N2              &kp N3              &kp N4              &kp N5                                  &kp KP_SLASH        &kp KP_N7           &kp KP_N8           &kp KP_N9           &kp KP_MINUS        &kp BSPC
   &kp LSHFT           &kp N6              &kp N7              &kp N8              &kp N9              &kp N0                                  &kp KP_ASTERISK     &kp KP_N4           &kp KP_N5           &kp KP_N6           &kp KP_PLUS         &kp KP_NUMLOCK
   &kp LCTRL           &kp LBKT            &kp RBKT            &kp BSLH            &kp MINUS           &kp EQUAL                               &kp KP_N0           &kp KP_N1           &kp KP_N2           &kp KP_N3           &kp KP_DOT          &kp RSHFT
#ifdef TBLE_DUAL_2U
   &trans              &trans              &trans     &trans              &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans        &trans     &trans      &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans  &trans        &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
#endif
            >;
        };

        function  {
            label = "Function";
            bindings = <
   &kp ESC             &kp F1              &kp F2              &kp F3              &kp F4              &bt BT_PRV                              &kp INS             &kp HOME            &kp UP              &kp END              &kp PG_UP           &kp BSPC
   &kp LSHFT           &kp F5              &kp F6              &kp F7              &kp F8              &bt BT_NXT                              &kp K_POWER         &kp LEFT            &kp DOWN            &kp RIGHT            &kp PG_DN           &kp PAUSE_BREAK
   &kp LCTRL           &kp F9              &kp F10             &kp F11             &kp F12             &out OUT_TOG                            &kp PSCRN           &kp C_PP            &kp C_MUTE          &kp C_VOL_DN         &kp C_VOL_UP        &kp C_AL_CALC
#ifdef TBLE_DUAL_2U
&trans &trans        &trans     &trans                &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans &trans        &trans     &kp RPAR        &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans &trans        &trans     &kp RPAR        &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
#endif
            >;
        };

        special {
            label = "Special";
            bindings = <
   &kp RA(GRAVE)       &kp MINUS           &kp RS(N2)          &kp LS(EQUAL)       &kp LS(MINUS)       &kp RA(N2)                              &kp RS(N4)          &kp GRAVE           &kp RS(GRAVE)       &kp LBKT            &kp SQT             &kp BSPC
   &kp RA(N1)          &kp RA(LBKT)        &kp RA(RBKT)        &kp LS(N8)          &kp LS(N9)          &kp RA(N3)                              &kp RS(N5)          &kp LS(N0)          &kp LS(LBKT)        &kp RA(N4)          &kp RA(N6)          &kp LS(NUHS)
   &kp LS(N7)          &kp RA(SQT)         &kp RA(NUHS)        &kp EQUAL           &kp RS(N1)          &kp LS(N6)                              &kp RA(E)           &kp NUBS            &kp RS(NUBS)        &kp RS(N3)          &kp LS(SQT)         &kp NUHS
#ifdef TBLE_DUAL_2U
&trans &trans        &trans     &kp RPAR                &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans &trans        &trans     &kp RPAR        &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans &trans        &trans     &kp RPAR        &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
#endif
            >;
        };


    };
};

